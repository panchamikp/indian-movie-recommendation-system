# -*- coding: utf-8 -*-
"""movie recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19pGI0pqg4mlXly9MhXdUfcWon5FtZtyH
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Load the dataset
df = pd.read_csv('/content/Indian_movies.csv')

# Rename columns for easier access
df.rename(columns={'Movie Names': 'Title', 'Genere': 'Genre'}, inplace=True)

# Fill missing values in metadata columns
df['Genre'] = df['Genre'].fillna('')
df['Description'] = df['Description'].fillna('')

# Combine Genre and Description to form metadata
df['metadata'] = df['Genre'] + ' ' + df['Description']

# View sample data
df[['Title', 'metadata']].head()

# Convert text to feature vectors using TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['metadata'])

print("TF-IDF matrix shape:", tfidf_matrix.shape)

# Compute cosine similarity between all movie pairs
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Create a mapping from movie title to index
indices = pd.Series(df.index, index=df['Title']).drop_duplicates()

def recommend(title, cosine_sim=cosine_sim):
    if title not in indices:
        return "Movie not found in the dataset."

    idx = indices[title]  # Get index of the movie
    sim_scores = list(enumerate(cosine_sim[idx]))  # Get pairwise similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)  # Sort by similarity
    sim_scores = sim_scores[1:6]  # Get top 5 (excluding the movie itself)

    movie_indices = [i[0] for i in sim_scores]
    return df['Title'].iloc[movie_indices]

# Replace with any movie title from your dataset
recommend("3 Idiots")

# Normalize titles to lowercase
indices = pd.Series(df.index, index=df['Title'].str.lower()).drop_duplicates()

def recommend(title, cosine_sim=cosine_sim):
    title = title.lower()  # normalize input
    if title not in indices:
        return "Movie not found in the dataset."

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]

    movie_indices = [i[0] for i in sim_scores]
    return df['Title'].iloc[movie_indices]

movie_name = input("Enter a movie title: ")
print("Recommended Movies:\n", recommend(movie_name))